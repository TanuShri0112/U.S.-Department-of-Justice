import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Heart, Target, Shield, Star, Languages, Volume2, Play, Pause } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { toast } from 'sonner';

const DreamsUnderstanding = () => {
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [currentSection, setCurrentSection] = useState(0);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [showDreamBuilder, setShowDreamBuilder] = useState(false);
  const [userDreams, setUserDreams] = useState([]);
  const [newDream, setNewDream] = useState('');

  // Language options
  const languageOptions = [
    { code: 'en', label: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
    { code: 'hi', label: 'рд╣рд┐рдиреНрджреА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'mr', label: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│' }
  ];

  // Content based on selected language
  const content = {
    en: {
      title: 'Understanding Your Dreams',
      description: 'Discover what financial security means for your family\'s future',
      sections: [
        {
          title: 'What Are Your Dreams?',
          icon: Heart,
          color: 'bg-pink-500',
          summary: 'Identifying your deepest aspirations and goals',
          details: `Dreams are the foundation of everything we do. They represent our hopes, aspirations, and the future we want to create for ourselves and our families.

Think about what truly matters to you:
тАв Your children's education and future
тАв A comfortable retirement
тАв A home that feels like a sanctuary
тАв The ability to help others
тАв Financial freedom and peace of mind

These aren't just wishes - they're the roadmap for your life's journey.`,
          examples: [
            'Children\'s education fund',
            'Dream home purchase',
            'Retirement security',
            'Family vacation fund',
            'Charitable giving'
          ]
        },
        {
          title: 'Why Dreams Need Protection',
          icon: Shield,
          color: 'bg-blue-500',
          summary: 'Understanding the risks that threaten your dreams',
          details: `Life is unpredictable, and our dreams are vulnerable to unexpected events. Without proper protection, years of planning and saving can be lost in an instant.

Common threats to your dreams include:
тАв Loss of income due to illness or injury
тАв Unexpected medical expenses
тАв Loss of a family breadwinner
тАв Natural disasters or accidents
тАв Economic downturns

Protection isn't about fear - it's about ensuring your dreams survive life's challenges.`,
          examples: [
            'Income protection insurance',
            'Health insurance coverage',
            'Life insurance for family',
            'Emergency fund building',
            'Disability coverage'
          ]
        },
        {
          title: 'Building Your Dream Foundation',
          icon: Target,
          color: 'bg-green-500',
          summary: 'Creating a solid base for your aspirations',
          details: `Every dream needs a strong foundation. Building this foundation requires understanding your current situation and creating a plan that grows with you.

Key elements of a strong foundation:
тАв Clear financial goals and timelines
тАв Emergency savings for unexpected events
тАв Insurance protection for major risks
тАв Regular review and adjustment of plans
тАв Professional guidance when needed

Remember, the best time to build your foundation is now, not when you need it.`,
          examples: [
            'Goal setting and planning',
            'Emergency fund creation',
            'Insurance portfolio review',
            'Regular financial checkups',
            'Professional consultation'
          ]
        }
      ],
      ui: {
        addDream: 'Add Dream',
        saveDreams: 'Save Dreams',
        myDreams: 'My Dreams',
        buildFoundation: 'Build Foundation',
        nextSection: 'Next Section',
        previousSection: 'Previous Section'
      }
    },
    hi: {
      title: 'рдЕрдкрдиреЗ рд╕рдкрдиреЛрдВ рдХреЛ рд╕рдордЭрдирд╛',
      description: 'рдЬрд╛рдиреЗрдВ рдХрд┐ рдЖрдкрдХреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рднрд╡рд┐рд╖реНрдп рдХреЗ рд▓рд┐рдП рд╡рд┐рддреНрддреАрдп рд╕реБрд░рдХреНрд╖рд╛ рдХрд╛ рдХреНрдпрд╛ рдорддрд▓рдм рд╣реИ',
      sections: [
        {
          title: 'рдЖрдкрдХреЗ рд╕рдкрдиреЗ рдХреНрдпрд╛ рд╣реИрдВ?',
          icon: Heart,
          color: 'bg-pink-500',
          summary: 'рдЕрдкрдиреА рдЧрд╣рд░реА рдЗрдЪреНрдЫрд╛рдУрдВ рдФрд░ рд▓рдХреНрд╖реНрдпреЛрдВ рдХреА рдкрд╣рдЪрд╛рди рдХрд░рдирд╛',
          details: `рд╕рдкрдиреЗ рд╣рдорд╛рд░реЗ рд╕рдм рдХреБрдЫ рдХреА рдиреАрдВрд╡ рд╣реИрдВред рд╡реЗ рд╣рдорд╛рд░реА рдЖрд╢рд╛рдУрдВ, рдЗрдЪреНрдЫрд╛рдУрдВ рдФрд░ рдЙрд╕ рднрд╡рд┐рд╖реНрдп рдХрд╛ рдкреНрд░рддрд┐рдирд┐рдзрд┐рддреНрд╡ рдХрд░рддреЗ рд╣реИрдВ рдЬреЛ рд╣рдо рдЕрдкрдиреЗ рд▓рд┐рдП рдФрд░ рдЕрдкрдиреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд▓рд┐рдП рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред

рд╕реЛрдЪреЗрдВ рдХрд┐ рдЖрдкрдХреЗ рд▓рд┐рдП рд╡рд╛рд╕реНрддрд╡ рдореЗрдВ рдХреНрдпрд╛ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ:
тАв рдЖрдкрдХреЗ рдмрдЪреНрдЪреЛрдВ рдХреА рд╢рд┐рдХреНрд╖рд╛ рдФрд░ рднрд╡рд┐рд╖реНрдп
тАв рдПрдХ рдЖрд░рд╛рдорджрд╛рдпрдХ рд╕реЗрд╡рд╛рдирд┐рд╡реГрддреНрддрд┐
тАв рдПрдХ рдШрд░ рдЬреЛ рдЖрд╢реНрд░рдпрд╛рд╕рд╛рд░рдЦреЗ рд╡рд╛рдЯрддреЗ
тАв рджреВрд╕рд░реЛрдВ рдХреА рдорджрдж рдХрд░рдиреЗ рдХреА рдХреНрд╖рдорддрд╛
тАв рд╡рд┐рддреНрддреАрдп рд╕реНрд╡рддрдВрддреНрд░рддрд╛ рдФрд░ рдорди рдХреА рд╢рд╛рдВрддрд┐

рдпреЗ рд╕рд┐рд░реНрдл рдЗрдЪреНрдЫрд╛ рдирд╣реАрдВ рд╣реИрдВ - рд╡реЗ рдЖрдкрдХреЗ рдЬреАрд╡рди рдХреА рдпрд╛рддреНрд░рд╛ рдХрд╛ рд░реЛрдбрдореИрдк рд╣реИрдВред`,
          examples: [
            'рдмрдЪреНрдЪреЛрдВ рдХреА рд╢рд┐рдХреНрд╖рд╛ рдлрдВрдб',
            'рд╕рдкрдиреЛрдВ рдХрд╛ рдШрд░ рдЦрд░реАрджрдирд╛',
            'рд╕реЗрд╡рд╛рдирд┐рд╡реГрддреНрддрд┐ рд╕реБрд░рдХреНрд╖рд╛',
            'рдкрд░рд┐рд╡рд╛рд░ рдХреА рдЫреБрдЯреНрдЯреА рдлрдВрдб',
            'рджрд╛рди рджреЗрдиреЗ рдХреА рдХреНрд╖рдорддрд╛'
          ]
        },
        {
          title: 'рд╕рдкрдиреЛрдВ рдХреЛ рд╕реБрд░рдХреНрд╖рд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдХреНрдпреЛрдВ рд╣реИ?',
          icon: Shield,
          color: 'bg-blue-500',
          summary: 'рдЙрди рдЬреЛрдЦрд┐рдореЛрдВ рдХреЛ рд╕рдордЭрдирд╛ рдЬреЛ рдЖрдкрдХреЗ рд╕рдкрдиреЛрдВ рдХреЛ рдЦрддрд░реЗ рдореЗрдВ рдбрд╛рд▓рддреЗ рд╣реИрдВ',
          details: `рдЬреАрд╡рди рдЕрдирд┐рд╢реНрдЪрд┐рдд рд╣реИ, рдФрд░ рд╣рдорд╛рд░реЗ рд╕рдкрдиреЗ рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рдШрдЯрдирд╛рдУрдВ рдХреЗ рдкреНрд░рддрд┐ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рд╣реИрдВред рдЙрдЪрд┐рдд рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рдмрд┐рдирд╛, рд╡рд░реНрд╖реЛрдВ рдХреА рдпреЛрдЬрдирд╛ рдФрд░ рдмрдЪрдд рдПрдХ рдкрд▓ рдореЗрдВ рдЦреЛ рд╕рдХрддреА рд╣реИред

рдЖрдкрдХреЗ рд╕рдкрдиреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рд╛рдорд╛рдиреНрдп рдЦрддрд░реЗ:
тАв рдмреАрдорд╛рд░реА рдпрд╛ рдЪреЛрдЯ рдХреЗ рдХрд╛рд░рдг рдЖрдп рдХрд╛ рдиреБрдХрд╕рд╛рди
тАв рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЦрд░реНрдЪ
тАв рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рдХрдорд╛рдиреЗ рд╡рд╛рд▓реЗ рдХреА рдореГрддреНрдпреБ
тАв рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЖрдкрджрд╛рдПрдВ рдпрд╛ рджреБрд░реНрдШрдЯрдирд╛рдПрдВ
тАв рдЖрд░реНрдерд┐рдХ рдордВрджреА

рд╕реБрд░рдХреНрд╖рд╛ рдбрд░ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдирд╣реАрдВ рд╣реИ - рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╣реИ рдХрд┐ рдЖрдкрдХреЗ рд╕рдкрдиреЗ рдЬреАрд╡рди рдХреА рдЪреБрдиреМрддрд┐рдпреЛрдВ рд╕реЗ рдмрдЪ рд╕рдХреЗрдВред`,
          examples: [
            'рдЖрдп рд╕реБрд░рдХреНрд╖рд╛ рдмреАрдорд╛',
            'рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреАрдорд╛ рдХрд╡реНрд╣рд░реЗрдЬ',
            'рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд▓рд┐рдП рдЬреАрд╡рди рдмреАрдорд╛',
            'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдлрдВрдб рдмрдирд╛рдирд╛',
            'рд╡рд┐рдХрд▓рд╛рдВрдЧрддрд╛ рдХрд╡реНрд╣рд░реЗрдЬ'
          ]
        },
        {
          title: 'рдЕрдкрдиреА рд╕рдкрдиреЛрдВ рдХреА рдиреАрдВрд╡ рдмрдирд╛рдирд╛',
          icon: Target,
          color: 'bg-green-500',
          summary: 'рдЕрдкрдиреА рдЗрдЪреНрдЫрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдПрдХ рдордЬрдмреВрдд рдЖрдзрд╛рд░ рдмрдирд╛рдирд╛',
          details: `рд╣рд░ рд╕рдкрдиреЗ рдХреЛ рдПрдХ рдордЬрдмреВрдд рдиреАрдВрд╡ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрддреА рд╣реИред рдЗрд╕ рдиреАрдВрд╡ рдХреЛ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐ рдХреЛ рд╕рдордЭрдирд╛ рдФрд░ рдПрдХ рдпреЛрдЬрдирд╛ рдмрдирд╛рдирд╛ рдЖрд╡рд╢реНрдпрдХ рд╣реИ рдЬреЛ рдЖрдкрдХреЗ рд╕рд╛рде рдмрдврд╝реЗред

рдПрдХ рдордЬрдмреВрдд рдиреАрдВрд╡ рдХреЗ рдореБрдЦреНрдп рддрддреНрд╡:
тАв рд╕реНрдкрд╖реНрдЯ рд╡рд┐рддреНрддреАрдп рд▓рдХреНрд╖реНрдп рдФрд░ рд╕рдордп рд╕реАрдорд╛
тАв рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рдШрдЯрдирд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдмрдЪрдд
тАв рдкреНрд░рдореБрдЦ рдЬреЛрдЦрд┐рдореЛрдВ рдХреЗ рд▓рд┐рдП рдмреАрдорд╛ рд╕реБрд░рдХреНрд╖рд╛
тАв рдпреЛрдЬрдирд╛рдУрдВ рдХреА рдирд┐рдпрдорд┐рдд рд╕рдореАрдХреНрд╖рд╛ рдФрд░ рд╕рдорд╛рдпреЛрдЬрди
тАв рдЬрд░реВрд░рдд рдкрдбрд╝рдиреЗ рдкрд░ рдкреЗрд╢реЗрд╡рд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди

рдпрд╛рдж рд░рдЦреЗрдВ, рдЕрдкрдиреА рдиреАрдВрд╡ рдмрдирд╛рдиреЗ рдХрд╛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рд╕рдордп рдЕрднреА рд╣реИ, рди рдХрд┐ рдЬрдм рдЖрдкрдХреЛ рдЗрд╕рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛред`,
          examples: [
            'рд▓рдХреНрд╖реНрдп рдирд┐рд░реНрдзрд╛рд░рдг рдФрд░ рдпреЛрдЬрдирд╛',
            'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдлрдВрдб рдмрдирд╛рдирд╛',
            'рдмреАрдорд╛ рдкреЛрд░реНрдЯрдлреЛрд▓рд┐рдпреЛ рд╕рдореАрдХреНрд╖рд╛',
            'рдирд┐рдпрдорд┐рдд рд╡рд┐рддреНрддреАрдп рдЬрд╛рдВрдЪ',
            'рдкреЗрд╢реЗрд╡рд░ рдкрд░рд╛рдорд░реНрд╢'
          ]
        }
      ],
      ui: {
        addDream: 'рд╕рдкрдирд╛ рдЬреЛрдбрд╝реЗрдВ',
        saveDreams: 'рд╕рдкрдиреЗ рд╕рд╣реЗрдЬреЗрдВ',
        myDreams: 'рдореЗрд░реЗ рд╕рдкрдиреЗ',
        buildFoundation: 'рдиреАрдВрд╡ рдмрдирд╛рдПрдВ',
        nextSection: 'рдЕрдЧрд▓рд╛ рдЦрдВрдб',
        previousSection: 'рдкрд┐рдЫрд▓рд╛ рдЦрдВрдб'
      }
    },
    mr: {
      title: 'рддреБрдордЪреЗ рд╕реНрд╡рдкреНрдиреЗ рд╕рдордЬреВрди рдШреЗрдгреЗ',
      description: 'рддреБрдордЪреНрдпрд╛ рдХреБрдЯреБрдВрдмрд╛рдЪреНрдпрд╛ рднрд╡рд┐рд╖реНрдпрд╛рд╕рд╛рдареА рдЖрд░реНрдерд┐рдХ рд╕реБрд░рдХреНрд╖рд╛ рдореНрд╣рдгрдЬреЗ рдХрд╛рдп рд╣реЗ рдЬрд╛рдгреВрди рдШреНрдпрд╛',
      sections: [
        {
          title: 'рддреБрдордЪреА рд╕реНрд╡рдкреНрдиреЗ рдХрд╛рдп рдЖрд╣реЗрдд?',
          icon: Heart,
          color: 'bg-pink-500',
          summary: 'рддреБрдордЪреНрдпрд╛ рдЦреЛрд▓ рдЗрдЪреНрдЫрд╛ рдЖрдгрд┐ рдзреНрдпреЗрдпрд╛рдВрдЪреА рдУрд│рдЦ рдХрд░рдгреЗ',
          details: `рд╕реНрд╡рдкреНрдиреЗ рдЖрдкрд▓реНрдпрд╛ рд╕рд░реНрд╡ рдХрд╛рд╣реАрдЪрд╛ рдкрд╛рдпрд╛ рдЖрд╣реЗрдд. рддреЗ рдЖрдкрд▓реНрдпрд╛ рдЖрд╢рд╛, рдЗрдЪреНрдЫрд╛ рдЖрдгрд┐ рддреНрдпрд╛рдЪреНрдпрд╛ рднрд╡рд┐рд╖реНрдпрд╛рдЪреЗ рдкреНрд░рддрд┐рдирд┐рдзрд┐рддреНрд╡ рдХрд░рддрд╛рдд рдЬреЗ рдЖрдкрдг рд╕реНрд╡рддрдГрд╕рд╛рдареА рдЖрдгрд┐ рдЖрдкрд▓реНрдпрд╛ рдХреБрдЯреБрдВрдмрд╛рд╕рд╛рдареА рддрдпрд╛рд░ рдХрд░реВ рдЗрдЪреНрдЫрд┐рддреЛ.

рд╡рд┐рдЪрд╛рд░ рдХрд░рд╛ рдХреА рддреБрдордЪреНрдпрд╛рд╕рд╛рдареА рдЦрд░реЛрдЦрд░ рдХрд╛рдп рдорд╣рддреНрд╡рд╛рдЪреЗ рдЖрд╣реЗ:
тАв рддреБрдордЪреНрдпрд╛ рдореБрд▓рд╛рдВрдЪреЗ рд╢рд┐рдХреНрд╖рдг рдЖрдгрд┐ рднрд╡рд┐рд╖реНрдп
тАв рдПрдХ рдЖрд░рд╛рдорджрд╛рдпрдХ рдирд┐рд╡реГрддреНрддреА
тАв рдПрдХ рдШрд░ рдЬреЗ рдЖрд╢реНрд░рдпрд╛рд╕рд╛рд░рдЦреЗ рд╡рд╛рдЯрддреЗ
тАв рдЗрддрд░рд╛рдВрдЪреА рдорджрдд рдХрд░рдгреНрдпрд╛рдЪреА рдХреНрд╖рдорддрд╛
тАв рдЖрд░реНрдерд┐рдХ рд╕реНрд╡рд╛рддрдВрддреНрд░реНрдп рдЖрдгрд┐ рдордирд╛рдЪреА рд╢рд╛рдВрддреА

рд╣реЗ рдлрдХреНрдд рдЗрдЪреНрдЫрд╛ рдирд╛рд╣реАрдд - рддреЗ рддреБрдордЪреНрдпрд╛ рдЬреАрд╡рдирд╛рдЪреНрдпрд╛ рдкреНрд░рд╡рд╛рд╕рд╛рдЪреЗ рд░реЛрдбрдореЕрдк рдЖрд╣реЗрдд.`,
          examples: [
            'рдореБрд▓рд╛рдВрдЪреЗ рд╢рд┐рдХреНрд╖рдг рдлрдВрдб',
            'рд╕реНрд╡рдкреНрдирд╛рдВрдЪреЗ рдШрд░ рдЦрд░реЗрджреА',
            'рдирд┐рд╡реГрддреНрддреА рд╕реБрд░рдХреНрд╖рд╛',
            'рдХреБрдЯреБрдВрдм рд╕реБрдЯреНрдЯреА рдлрдВрдб',
            'рджрд╛рди рджреЗрдгреНрдпрд╛рдЪреА рдХреНрд╖рдорддрд╛'
          ]
        },
        {
          title: 'рд╕реНрд╡рдкреНрдирд╛рдВрдирд╛ рд╕реБрд░рдХреНрд╖реЗрдЪреА рдЧрд░рдЬ рдХрд╛ рдЖрд╣реЗ?',
          icon: Shield,
          color: 'bg-blue-500',
          summary: 'рддреНрдпрд╛рдВрдЪреНрдпрд╛ рдзреЛрдХреНрдпрд╛рдВрдирд╛ рд╕рдордЬреВрди рдШреЗрдгреЗ рдЬреЗ рддреБрдордЪреНрдпрд╛ рд╕реНрд╡рдкреНрдирд╛рдВрдирд╛ рдзреЛрдХреНрдпрд╛рдд рдЖрдгрддрд╛рдд',
          details: `рдЬреАрд╡рди рдЕрдирд┐рд╢реНрдЪрд┐рдд рдЖрд╣реЗ, рдЖрдгрд┐ рдЖрдкрд▓реА рд╕реНрд╡рдкреНрдиреЗ рдЕрдирдкреЗрдХреНрд╖рд┐рдд рдШрдЯрдирд╛рдВрдирд╛ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдЖрд╣реЗрдд. рдпреЛрдЧреНрдп рд╕рдВрд░рдХреНрд╖рдгрд╛рд╢рд┐рд╡рд╛рдп, рд╡рд░реНрд╖рд╛рдВрдЪреА рдпреЛрдЬрдирд╛ рдЖрдгрд┐ рдмрдЪрдд рдПрдХрд╛ рдХреНрд╖рдгрд╛рдд рдЧрдорд╛рд╡рд▓реА рдЬрд╛рдК рд╢рдХрддреЗ.

рддреБрдордЪреНрдпрд╛ рд╕реНрд╡рдкреНрдирд╛рдВрд╕рд╛рдареА рд╕рд╛рдорд╛рдиреНрдп рдзреЛрдХреЗ:
тАв рдЖрдЬрд╛рд░ рдХрд┐рдВрд╡рд╛ рдЬрдЦрдореЗрдореБрд│реЗ рдЙрддреНрдкрдиреНрдирд╛рдЪреЗ рдиреБрдХрд╕рд╛рди
тАв рдЕрдирдкреЗрдХреНрд╖рд┐рдд рд╡реИрджреНрдпрдХреАрдп рдЦрд░реНрдЪ
тАв рдХреБрдЯреБрдВрдмрд╛рдЪреНрдпрд╛ рдХрдорд╛рд╡рдгрд╛рд▒реНрдпрд╛рдЪреЗ рдиреБрдХрд╕рд╛рди
тАв рдиреИрд╕рд░реНрдЧрд┐рдХ рдЖрдкрддреНрддреА рдХрд┐рдВрд╡рд╛ рдЕрдкрдШрд╛рдд
тАв рдЖрд░реНрдерд┐рдХ рдордВрджреА

рд╕рдВрд░рдХреНрд╖рдг рднреАрддреАрдмрджреНрджрд▓ рдирд╛рд╣реА - рд╣реЗ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдгреНрдпрд╛рдмрджреНрджрд▓ рдЖрд╣реЗ рдХреА рддреБрдордЪреА рд╕реНрд╡рдкреНрдиреЗ рдЬреАрд╡рдирд╛рдЪреНрдпрд╛ рдЖрд╡реНрд╣рд╛рдирд╛рдВрдирд╛ рдЯрд┐рдХреВрди рд░рд╛рд╣рддреАрд▓.`,
          examples: [
            'рдЙрддреНрдкрдиреНрди рд╕рдВрд░рдХреНрд╖рдг рд╡рд┐рдорд╛',
            'рдЖрд░реЛрдЧреНрдп рд╡рд┐рдорд╛ рдХрд╡реНрд╣рд░реЗрдЬ',
            'рдХреБрдЯреБрдВрдмрд╛рд╕рд╛рдареА рдЬреАрд╡рди рд╡рд┐рдорд╛',
            'рдЖрдгреАрдмрд╛рдгреА рдлрдВрдб рддрдпрд╛рд░ рдХрд░рдгреЗ',
            'рдЕрдкрдВрдЧрддреНрд╡ рдХрд╡реНрд╣рд░реЗрдЬ'
          ]
        },
        {
          title: 'рддреБрдордЪреНрдпрд╛ рд╕реНрд╡рдкреНрдирд╛рдВрдЪрд╛ рдкрд╛рдпрд╛ рддрдпрд╛рд░ рдХрд░рдгреЗ',
          icon: Target,
          color: 'bg-green-500',
          summary: 'рддреБрдордЪреНрдпрд╛ рдЗрдЪреНрдЫрд╛рдВрд╕рд╛рдареА рдПрдХ рдордЬрдмреВрдд рдкрд╛рдпрд╛ рддрдпрд╛рд░ рдХрд░рдгреЗ',
          details: `рдкреНрд░рддреНрдпреЗрдХ рд╕реНрд╡рдкреНрдирд╛рд▓рд╛ рдПрдХ рдордЬрдмреВрдд рдкрд╛рдпрд╛ рд╣рд╡рд╛. рд╣рд╛ рдкрд╛рдпрд╛ рддрдпрд╛рд░ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рддреБрдордЪреНрдпрд╛ рд╕рдзреНрдпрд╛рдЪреНрдпрд╛ рдкрд░рд┐рд╕реНрдерд┐рддреАрд▓рд╛ рд╕рдордЬреВрди рдШреЗрдгреЗ рдЖрдгрд┐ рдПрдХ рдпреЛрдЬрдирд╛ рддрдпрд╛рд░ рдХрд░рдгреЗ рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗ рдЬреА рддреБрдордЪреНрдпрд╛рд╕реЛрдмрдд рд╡рд╛рдврддреЗ.

рдПрдХ рдордЬрдмреВрдд рдкрд╛рдпрд╛рдЪреЗ рдореБрдЦреНрдп рдШрдЯрдХ:
тАв рд╕реНрдкрд╖реНрдЯ рдЖрд░реНрдерд┐рдХ рдзреНрдпреЗрдп рдЖрдгрд┐ рд╡реЗрд│реЗрдЪреА рдорд░реНрдпрд╛рджрд╛
тАв рдЕрдирдкреЗрдХреНрд╖рд┐рдд рдШрдЯрдирд╛рдВрд╕рд╛рдареА рдЖрдгреАрдмрд╛рдгреА рдмрдЪрдд
тАв рдкреНрд░рдореБрдЦ рдзреЛрдХреНрдпрд╛рдВрд╕рд╛рдареА рд╡рд┐рдорд╛ рд╕рдВрд░рдХреНрд╖рдг
тАв рдпреЛрдЬрдирд╛рдВрдЪреЗ рдирд┐рдпрдорд┐рдд рдкреБрдирд░рд╛рд╡рд▓реЛрдХрди рдЖрдгрд┐ рд╕рдорд╛рдпреЛрдЬрди
тАв рдЧрд░рдЬ рдкрдбрд▓реНрдпрд╛рд╡рд░ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рди

рд▓рдХреНрд╖рд╛рдд рдареЗрд╡рд╛, рддреБрдордЪрд╛ рдкрд╛рдпрд╛ рддрдпрд╛рд░ рдХрд░рдгреНрдпрд╛рдЪрд╛ рд╕рд░реНрд╡реЛрддреНрддрдо рд╡реЗрд│ рдЖрддрд╛ рдЖрд╣реЗ, рдЬреЗрд╡реНрд╣рд╛ рддреБрдореНрд╣рд╛рд▓рд╛ рддреНрдпрд╛рдЪреА рдЧрд░рдЬ рдЕрд╕реЗрд▓ рддреЗрд╡реНрд╣рд╛ рдирд╛рд╣реА.`,
          examples: [
            'рдзреНрдпреЗрдп рдирд┐рд░реНрдзрд╛рд░рдг рдЖрдгрд┐ рдпреЛрдЬрдирд╛',
            'рдЖрдгреАрдмрд╛рдгреА рдлрдВрдб рддрдпрд╛рд░ рдХрд░рдгреЗ',
            'рд╡рд┐рдорд╛ рдкреЛрд░реНрдЯрдлреЛрд▓рд┐рдУ рдкреБрдирд░рд╛рд╡рд▓реЛрдХрди',
            'рдирд┐рдпрдорд┐рдд рдЖрд░реНрдерд┐рдХ рддрдкрд╛рд╕рдгреА',
            'рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рд╕рд▓реНрд▓рд╛'
          ]
        }
      ],
      ui: {
        addDream: 'рд╕реНрд╡рдкреНрди рдЬреЛрдбрд╛',
        saveDreams: 'рд╕реНрд╡рдкреНрдиреЗ рдЬрддрди рдХрд░рд╛',
        myDreams: 'рдорд╛рдЭреА рд╕реНрд╡рдкреНрдиреЗ',
        buildFoundation: 'рдкрд╛рдпрд╛ рддрдпрд╛рд░ рдХрд░рд╛',
        nextSection: 'рдкреБрдвреАрд▓ рд╡рд┐рднрд╛рдЧ',
        previousSection: 'рдорд╛рдЧреАрд▓ рд╡рд┐рднрд╛рдЧ'
      }
    }
  };

  const currentContent = content[selectedLanguage];
  const currentSectionData = currentContent.sections[currentSection];

  const handleLanguageChange = (langCode) => {
    setSelectedLanguage(langCode);
    setCurrentSection(0);
  };

  const handleNextSection = () => {
    if (currentSection < currentContent.sections.length - 1) {
      setCurrentSection(currentSection + 1);
    }
  };

  const handlePreviousSection = () => {
    if (currentSection > 0) {
      setCurrentSection(currentSection - 1);
    }
  };

  const handleSpeak = (text) => {
    if (isSpeaking) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
      return;
    }

    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = selectedLanguage === 'en' ? 'en-US' : 
                     selectedLanguage === 'hi' ? 'hi-IN' : 'mr-IN';
    utterance.rate = 0.9;
    
    utterance.onend = () => setIsSpeaking(false);
    utterance.onerror = () => setIsSpeaking(false);
    
    setIsSpeaking(true);
    window.speechSynthesis.speak(utterance);
  };

  const handleAddDream = () => {
    if (newDream.trim()) {
      setUserDreams([...userDreams, { id: Date.now(), text: newDream, completed: false }]);
      setNewDream('');
      toast.success(selectedLanguage === 'en' ? 'Dream added successfully!' : 
                   selectedLanguage === 'hi' ? 'рд╕рдкрдирд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛!' : 
                   'рд╕реНрд╡рдкреНрди рдпрд╢рд╕реНрд╡реАрд░рд┐рддреНрдпрд╛ рдЬреЛрдбрд▓реЗ!');
    }
  };

  const handleToggleDream = (dreamId) => {
    setUserDreams(userDreams.map(dream => 
      dream.id === dreamId ? { ...dream, completed: !dream.completed } : dream
    ));
  };

  const handleRemoveDream = (dreamId) => {
    setUserDreams(userDreams.filter(dream => dream.id !== dreamId));
  };

  return (
    <div className="max-w-6xl mx-auto px-6">
      <div className="bg-gradient-to-r from-pink-50 to-purple-50 rounded-2xl shadow-lg p-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            {currentContent.title}
          </h2>
          <p className="text-xl text-gray-600 leading-relaxed">
            {currentContent.description}
          </p>
        </div>

        {/* Language Selection */}
        <div className="flex justify-center mb-8">
          <div className="flex gap-2">
            {languageOptions.map((lang) => (
              <Button
                key={lang.code}
                onClick={() => handleLanguageChange(lang.code)}
                variant={selectedLanguage === lang.code ? "default" : "outline"}
                className="flex items-center gap-2"
              >
                <span>{lang.flag}</span>
                <span>{lang.label}</span>
              </Button>
            ))}
          </div>
        </div>

        {/* Navigation */}
        <div className="flex justify-between items-center mb-8">
          <Button
            onClick={handlePreviousSection}
            disabled={currentSection === 0}
            variant="outline"
          >
            {currentContent.ui.previousSection}
          </Button>
          
          <div className="text-sm text-gray-600">
            Section {currentSection + 1} / {currentContent.sections.length}
          </div>
          
          <Button
            onClick={handleNextSection}
            disabled={currentSection === currentContent.sections.length - 1}
            variant="outline"
          >
            {currentContent.ui.nextSection}
          </Button>
        </div>

        {/* Current Section */}
        <div className="bg-white rounded-xl p-8 shadow-md mb-8">
          <div className="flex items-start gap-6">
            <div className={`${currentSectionData.color} p-4 rounded-full text-white`}>
              <currentSectionData.icon className="h-8 w-8" />
            </div>
            
            <div className="flex-1">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-2xl font-bold text-gray-900">
                  {currentSectionData.title}
                </h3>
                <Button
                  onClick={() => handleSpeak(currentSectionData.summary + '. ' + currentSectionData.details)}
                  variant="ghost"
                  size="icon"
                  className="text-gray-500 hover:text-gray-700"
                >
                  {isSpeaking ? <Pause className="h-5 w-5" /> : <Play className="h-5 w-5" />}
                </Button>
              </div>
              
              <p className="text-lg text-gray-700 mb-6 leading-relaxed">
                {currentSectionData.summary}
              </p>
              
              <div className="bg-gray-50 rounded-lg p-6 mb-6">
                <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {currentSectionData.details}
                </p>
              </div>

              {/* Examples */}
              <div className="bg-blue-50 rounded-lg p-6">
                <h4 className="text-lg font-semibold text-blue-900 mb-3">
                  {selectedLanguage === 'en' ? 'Examples' : 
                   selectedLanguage === 'hi' ? 'рдЙрджрд╛рд╣рд░рдг' : 'рдЙрджрд╛рд╣рд░рдгреЗ'}
                </h4>
                <ul className="space-y-2">
                  {currentSectionData.examples.map((example, index) => (
                    <li key={index} className="flex items-center gap-2 text-blue-800">
                      <Star className="h-4 w-4 text-blue-500" />
                      {example}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Dream Builder */}
        <div className="bg-white rounded-xl p-8 shadow-md mb-8">
          <div className="text-center mb-6">
            <h3 className="text-2xl font-bold text-gray-900 mb-2">
              {currentContent.ui.myDreams}
            </h3>
            <p className="text-gray-600">
              {selectedLanguage === 'en' ? 'Start building your dream foundation' :
               selectedLanguage === 'hi' ? 'рдЕрдкрдиреА рд╕рдкрдиреЛрдВ рдХреА рдиреАрдВрд╡ рдмрдирд╛рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ' :
               'рддреБрдордЪреНрдпрд╛ рд╕реНрд╡рдкреНрдирд╛рдВрдЪрд╛ рдкрд╛рдпрд╛ рдмрдирд╡рдгреЗ рд╕реБрд░реВ рдХрд░рд╛'}
            </p>
          </div>

          <div className="flex gap-4 mb-6">
            <input
              type="text"
              value={newDream}
              onChange={(e) => setNewDream(e.target.value)}
              placeholder={selectedLanguage === 'en' ? 'Enter your dream...' :
                         selectedLanguage === 'hi' ? 'рдЕрдкрдирд╛ рд╕рдкрдирд╛ рджрд░реНрдЬ рдХрд░реЗрдВ...' :
                         'рддреБрдордЪреЗ рд╕реНрд╡рдкреНрди рдЯрд╛рдХрд╛...'}
              className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <Button onClick={handleAddDream} className="bg-pink-600 hover:bg-pink-700">
              {currentContent.ui.addDream}
            </Button>
          </div>

          {userDreams.length > 0 && (
            <div className="space-y-3">
              {userDreams.map((dream) => (
                <div key={dream.id} className="flex items-center gap-3 p-4 bg-gray-50 rounded-lg">
                  <input
                    type="checkbox"
                    checked={dream.completed}
                    onChange={() => handleToggleDream(dream.id)}
                    className="h-5 w-5 text-pink-600 rounded focus:ring-pink-500"
                  />
                  <span className={`flex-1 ${dream.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>
                    {dream.text}
                  </span>
                  <Button
                    onClick={() => handleRemoveDream(dream.id)}
                    variant="ghost"
                    size="sm"
                    className="text-red-600 hover:text-red-800"
                  >
                    ├Ч
                  </Button>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Section Navigation Dots */}
        <div className="flex justify-center gap-2">
          {currentContent.sections.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentSection(index)}
              className={`w-3 h-3 rounded-full transition-colors ${
                index === currentSection ? 'bg-pink-600' : 'bg-gray-300 hover:bg-gray-400'
              }`}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default DreamsUnderstanding;

